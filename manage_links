#!/usr/bin/env python3
# coding: utf-8


import argparse
import errno
import os
import os.path
import sys

import yaml

from manage import term
from manage import util


def dotfiles_location():
    return os.path.dirname(os.path.abspath(__file__))


class Symlink(object):
    def __init__(self, yaml_data):
        self.path = yaml_data['path']
        self.destination = yaml_data['destination']

    def check(self):
        full_path = os.path.join(home(), self.path)
        try:
            linked_to = os.readlink(full_path)
        except OSError as ose:
            if ose.errno in (errno.ENOENT, errno.EINVAL):
                return False
            else:
                raise

        full_destination = os.path.join(dotfiles_location(), self.destination)
        linked_to = os.path.normpath(linked_to)

        installed = (linked_to == full_destination)
        return installed

    def install(self):
        full_path = os.path.join(home(), self.path)
        if os.path.exists(full_path):
            response = yes_no_question(
                'The path “{}” already exists, overwrite?'.format(full_path))
            if not response:
                return False
            else:
                os.unlink(full_path)

        full_destination = os.path.join(dotfiles_location(), self.destination)
        os.symlink(full_destination, full_path)

        return True


_SHELL_INSERT = '''\
### (begin dotfiles managed section) ###
DOTFILES='{dotfiles}'
source "$DOTFILES"/'{source}'
### (  end dotfiles managed section) ###
'''


class ShellInsertion(object):
    def __init__(self, yaml_data):
        self.file_to_source = yaml_data['file-to-source']
        self.rcfile = yaml_data['file']

    def _get_insertion(self):
        dotfiles_loc = dotfiles_location()
        return _SHELL_INSERT.format(
            dotfiles=dotfiles_loc,
            source=self.file_to_source)

    def _rcfile(self):
        return os.path.join(home(), self.rcfile)

    def check(self):
        try:
            with open(self._rcfile(), 'r') as fh:
                data = fh.read()
        except OSError as ose:
            if ose.errno in (errno.ENOENT, errno.EINVAL):
                return False
            else:
                raise
        return self._get_insertion() in data

    def install(self):
        if self.check():
            util.abort_with_error('Link already installed.')

        with open(self._rcfile(), 'a') as fh:
            fh.write(self._get_insertion())

        return True


link_types = {
    'symlink': Symlink,
    'shell-insertion': ShellInsertion,
}


def yes_no_question(question):
    while True:
        sys.stdout.write(
            '{bold}{q} [{green}Yes{nocolor}/{red}No{nocolor}]{reset} '.format(
                q=question,
                bold=term.BOLD, nocolor=term.NOCOLOR, reset=term.RESET,
                green=term.GREEN, red=term.RED
            )
        )
        sys.stdout.flush()
        user_input = sys.stdin.readline()
        processed_input = user_input.strip().lower()
        if processed_input.lower() in ('y', 'yes'):
            return True
        elif processed_input.lower() in ('n', 'no'):
            return False
        elif not user_input:
            raise IOError('Unexpected EOF in user input.')
        else:
            sys.stderr.write('“Yes” or “No” only, please.\n')


def home():
    return os.environ['HOME']


def load_links():
    with open('links', 'r') as f:
        data = yaml.load(f)

    links = {}
    for name, value in data.items():
        link_class = link_types.get(value.get('type'))
        if link_class is None:
            raise IOError('Unknown link type for link “{}”.'.format(name))
        links[name] = link_class(value)

    return links


def list_links():
    all_link_data = load_links()
    
    links = sorted(s for s in all_link_data)
    sys.stdout.write('{bold}{green}Links:{reset}\n'.format(
        bold=term.BOLD, green=term.GREEN, reset=term.RESET))
    for idx, link_name in enumerate(links, 1):
        link = all_link_data[link_name]
        installed = link.check()

        if installed:
            status = '{green}(installed){reset}'
        else:
            status = '{bold}{red}(not installed){reset}'
        status = status.format(
            bold=term.BOLD, green=term.GREEN, red=term.RED, reset=term.RESET)
        
        sys.stdout.write('  {bold}[{}]{reset} {} {}\n'.format(
            idx, link_name, status, bold=term.BOLD, reset=term.RESET))


def install_link(link):
    all_link_data = load_links()

    link_number = None
    try:
        link_number = int(link, 10)
    except ValueError:
        pass
    if link_number is not None:
        link_number -= 1
        links = sorted(s for s in all_link_data)
        if link_number < 0:
            util.abort_with_error('Link number too small.')
        if len(links) <= link_number:
            util.abort_with_error('Link number too large.')
        link = links[link_number]
    else:
        if link not in all_link_data:
            util.abort_with_error('Unknown link “link”.')

    sys.stdout.write('{bold}{green}Installing link “{}”…{reset}\n'.format(
        link, bold=term.BOLD, reset=term.RESET, green=term.GREEN))

    link_data = all_link_data[link]
    result = link_data.install()

    if result:
        sys.stdout.write('{bold}{green}Link “{}” installed.{reset}\n'.format(
            link, bold=term.BOLD, reset=term.RESET, green=term.GREEN))
    else:
        sys.stdout.write(
            'Installation of link “{}” aborted.\n'.format(link))


def main():
    parser = argparse.ArgumentParser()
    subcommands = parser.add_subparsers(dest='command')

    list_cmd = subcommands.add_parser('list')

    install_cmd = subcommands.add_parser('install')
    install_cmd.add_argument(
        'name_or_number',
        help='Either the name of the link to install, or its number in'
        ' `manage_links list`.',
    )

    pargs = parser.parse_args()

    if not pargs.command or pargs.command == 'list':
        list_links()
    elif pargs.command == 'install':
        install_link(pargs.name_or_number)


if __name__ == '__main__':
    main()
