# A multiline zsh prompt.

function _git_branch() {
	GIT_BRANCH="$(git symbolic-ref --short HEAD 2>/dev/null)"

	if [[ $? != 0 ]]; then
		# Because Ubuntu (precise) is so far behind the curve, apparently, that
		# its git's symbolic-ref doesn't yet have --short.
		# Once I stop dealing with these systems, this entire function
		# can be done with just the above git call.
		GIT_BRANCH="$(git symbolic-ref HEAD 2>/dev/null)"
		if [[ $? != 0 ]]; then
			exit 1
		fi
		GIT_BRANCH="$(echo "$GIT_BRANCH" | sed -e 's_^refs/heads/__')"
	fi
	echo "$GIT_BRANCH"
}

function _prompt_alpha_get_location() {
	local GIT_ROOT="`_git_root`"

	_prompt_alpha_uid_and_host

	if [[ -n "$GIT_ROOT" ]]; then
		local GIT_BRANCH
		GIT_BRANCH="$(_git_branch)"
		if [[ $? != 0 ]]; then
			GIT_BRANCH="%B%F{red}detached head%f%b"
		fi

		local GIT_PWD="$(git rev-parse --show-prefix)"
		if [[ "${GIT_PWD: -1}" == "/" ]] then
			GIT_PWD="${GIT_PWD:0:-1}"
		fi
		echo "%F{green}±%f %B$(basename "${GIT_ROOT}")%b:%F{green}${GIT_BRANCH}%f:%B%F{blue}/${GIT_PWD}%f%b"
	else
		echo '%B%F{blue}%~%f%b'
	fi
}


if [[ -z "$_PROMPT_ALPHA_DEFAULT_USER" ]]; then
	if [[ -f ~/.config/prompt_default_user ]]; then
		export _PROMPT_ALPHA_DEFAULT_USER="$(cat ~/.config/prompt_default_user)"
	fi
fi


function _prompt_alpha_uid_and_host() {
	local output_at=0
	local output=0

	if [[ "$UID" -eq 0 ]]; then
		echo -n '%F{red}%B%n%b%f%F{yellow}@%f'
		output_at=1
		output=1
	elif [[ "$USERNAME" != "$_PROMPT_ALPHA_DEFAULT_USER" ]]; then
		echo -n '%F{green}%B%n%b@%f'
		output_at=1
		output=1
	fi

	if [[ -n "$SSH_CONNECTION" ]]; then
		if [[ $output_at -eq 0 ]]; then
			echo -n '%F{green}@%f'
		fi
		echo -n '%F{green}%B%M%b%f'
		output=1
	fi

	if [[ $output -ne 0 ]]; then
		echo -n ' '
	fi
}


# Prints an indicator of what mode we're in: vi-normal, vi-insert, or emacs.
function _prompt_alpha_key_mode() {
	if [[ "$KEYMAP" == "main" ]]; then
		printf '[%%{\x1b[92m%%}i%%{\x1b[0m%%}]'
	elif [[ "$KEYMAP" == "vicmd" ]]; then
		printf '[%%{\x1b[93m%%}n%%{\x1b[0m%%}]'
	else
		printf '[? (%s)]' "$KEYMAP"
	fi
}

function _prompt_alpha_zle_keymode_change {
    zle reset-prompt
}

zle -N zle-line-init _prompt_alpha_zle_keymode_change
zle -N zle-keymap-select _prompt_alpha_zle_keymode_change


function _prompt_alpha_cmd_symbol() {
	if [[ "$UID" -eq 0 ]]; then
		echo -n '%F{red}%B#%b%f'
	else
		printf '%%{\x1b[1;38;5;033m%%}»%%{\x1b[0m%%}'
	fi
}


function _prompt_alpha_set_title() {
	local TITLE;
	local GIT_ROOT="`_git_root`"
	if [[ -n "$GIT_ROOT" ]]; then
		local GIT_PWD="$(git rev-parse --show-prefix)"
		if [[ "${GIT_PWD: -1}" == "/" ]] then
			GIT_PWD="${GIT_PWD:0:-1}"
		fi
		TITLE="zsh: ±$(basename "$GIT_ROOT"):/$GIT_PWD"
	else
		TITLE="zsh: `pwd`"
	fi
	_xterm_title "$TITLE"
}


function _xterm_title() {
	printf '\x1b]2;%s\x1b\\' "$1"
}


function _last_command_exit_status_assoc_array() {
	declare -gA _SIGNAL_MAP
	# We use python to dump out something we can use to build an associative
	# array of signal numbers to names. The python program prints, on each
	# line,
	#     NAME NUMBER
	python -c 'import sys
try: sys.path.remove("")
except ValueError: pass
import signal
signals = {
        "SIGHUP": signal.SIGHUP,
        "SIGINT": signal.SIGINT,
        "SIGQUIT": signal.SIGQUIT,
        "SIGILL": signal.SIGILL,
        "SIGABRT": signal.SIGABRT,
        "SIGFPE": signal.SIGFPE,
        "SIGKILL": signal.SIGKILL,
        "SIGSEGV": signal.SIGSEGV,
        "SIGPIPE": signal.SIGPIPE,
        "SIGALRM": signal.SIGALRM,
        "SIGTERM": signal.SIGTERM,
        "SIGUSR1": signal.SIGUSR1,
        "SIGUSR2": signal.SIGUSR2,
        "SIGCHLD": signal.SIGCHLD,
        "SIGCONT": signal.SIGCONT,
        "SIGSTOP": signal.SIGSTOP,
        "SIGTSTP": signal.SIGTSTP,
        "SIGTTIN": signal.SIGTTIN,
        "SIGTTOU": signal.SIGTTOU,
        "SIGBUS": signal.SIGBUS,
        "SIGPOLL": signal.SIGPOLL,
        "SIGPROF": signal.SIGPROF,
        "SIGSYS": signal.SIGSYS,
        "SIGTRAP": signal.SIGTRAP,
        "SIGURG": signal.SIGURG,
}
for name, signal in signals.items(): print("{} {}".format(name, signal.value))
' | while read -rA ITEMS; do
		local NAME="${ITEMS[1]}"
		local VALUE="${ITEMS[2]}"
		_SIGNAL_MAP[$(($VALUE + 128))]="$NAME"
	done
}


function _last_command_exit_status() {
	local exit_status="$1"
	if [[ "${+_SIGNAL_MAP}" == 0 ]]; then
		_last_command_exit_status_assoc_array
	fi
	#printf 'SIGINT? %s ' "${_SIGNAL_MAP[130]}"
	#printf 'stat? -->%s<-- exists? %s' "$exit_status" "${+_SIGNAL_MAP[$exit_status]}"
	if [[ "${+_SIGNAL_MAP[$exit_status]}" == 1 ]]; then
		local NAME="${_SIGNAL_MAP[$exit_status]}"
		printf '%%B%%F{red}(last command got signal %s)%%f%%b\n' "$NAME"
	else
		printf '%%(?||%%B%%F{red}(last command returned %%?.%%)%%f%%b\n)'
	fi
}


function _prompt_alpha() {
	local LAST_EXIT="$?"
	_prompt_alpha_get_location
	_last_command_exit_status "$LAST_EXIT"
	_prompt_alpha_key_mode
	printf ' '
	_prompt_alpha_cmd_symbol
	printf ' '
}


function _prompt_alpha_setup() {
	PS1='$(_prompt_alpha)'
	eval 'function precmd() { _prompt_alpha_set_title; }'
}
